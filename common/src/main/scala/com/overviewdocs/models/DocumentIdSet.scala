package com.overviewdocs.models

import scala.collection.immutable

/** A set of document IDs.
  *
  * This assumes all document IDs are generated by ANDing a 32-bit document-set
  * ID with a 32-bit document _number_ within the document set. (We'll call that
  * number a "lower ID" in this class.)
  *
  * It's small enough to send over the wire. A 10M-document docset will have a
  * 10M-element bitset, which is 1.25MB.
  */
case class DocumentIdSet(
  /** Document Set ID */
  val documentSetId: Int,

  /** Set of last 32-bit components of all matching Document IDs. */
  val lowerIds: immutable.BitSet
) {
  /** `true` iff this search result contains the given document ID. */
  def contains(documentId: Long): Boolean = {
    val inDocumentSet = (documentId >> 32).toInt == documentSetId 
    val inLowerIds = lowerIds.contains(documentId.toInt)
    inDocumentSet && inLowerIds
  }

  /** Document IDs, in an Array.
    *
    * The return value will be sorted by ID.
    */
  def toArray: Array[Long] = {
    val upperBits: Long = documentSetId.toLong << 32
    val ret = new Array[Long](size)
    lowerIds.zipWithIndex.foreach { case (lowerIds, index) => ret(index) = upperBits | lowerIds }
    ret
  }

  /** Document IDs, in a Seq.
    *
    * The return value will be sorted by ID.
    */
  def toSeq: Seq[Long] = toArray.toSeq

  /** Document IDs that match both DocumentIdSets.
    *
    * If the sets point to different document sets, returns an empty set in
    * <em>this</em> (not <em>that</em>) document set.
    */
  def intersect(that: DocumentIdSet): DocumentIdSet = {
    if (that.documentSetId != this.documentSetId) {
      DocumentIdSet(documentSetId, immutable.BitSet.empty)
    } else {
      DocumentIdSet(documentSetId, lowerIds.intersect(that.lowerIds))
    }
  }

  /** Number of documents. */
  lazy val size: Int = lowerIds.size
}

object DocumentIdSet {
  def apply(ids: Seq[Long]): DocumentIdSet = {
    ids.headOption match {
      case None => DocumentIdSet.empty
      case Some(id) => {
        val documentSetId = (id >> 32).toInt
        val bitSet = immutable.BitSet(ids.map(_.toInt): _*)
        DocumentIdSet(documentSetId, bitSet)
      }
    }
  }

  def empty: DocumentIdSet = DocumentIdSet(0, immutable.BitSet.empty)
}
