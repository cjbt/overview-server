package com.overviewdocs.models

import java.util.Arrays

/** An ordered list of document IDs.
  *
  * This assumes all document IDs are generated by ANDing a 32-bit document-set
  * ID with a 32-bit document _number_ within the document set. (We'll call that
  * number a "lower ID" in this class.)
  *
  * It's too large to pass around in Akka messages, but it's an okay size to
  * cache and transfer via side channel (e.g., Postgres, Redis). A 10M-element
  * document list will have 10M 32-bit Array entries, which makes 40MB.
  */
case class DocumentIdList(
  val id: Long,

  /** DocumentSet ID */
  val documentSetId: Int,

  /** Field name this list was sorted by. */
  val fieldName: String,

  /** List of last 32-bit components of all Document IDs. */
  val document32BitIds: Array[Int]
) {
  /** 64-bit document IDs. */
  def toDocumentIdArray: Array[Long] = {
    val upperId = documentSetId.toLong << 32
    document32BitIds.map(upperId | _)
  }

  override def equals(that: Any) = that match {
    case DocumentIdList(thatId, thatDocumentSetId, thatFieldName, thatDocument32BitIds) => {
      id == thatId && documentSetId == thatDocumentSetId && fieldName == thatFieldName && Arrays.equals(document32BitIds, thatDocument32BitIds)
    }
    case _ => false
  }

  override def toString: String = {
    s"DocumentIdList(${id}L,${documentSetId},${fieldName},[${document32BitIds.mkString(" ")}])"
  }
}
