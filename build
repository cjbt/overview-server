#!/bin/bash

# Usage: ./build overview-server.zip
#
# Runs the "stage" command for all important targets; then zips them into the
# specified file, rooted in a directory of the same name as the zipfile.
#
# For instance: ./build overview-server.zip will create overview-server.zip
# with all its contents in an "overview-server/" directory.
#
# To use the resulting zipfile:
#
# 1. Unzip it
# 2. cd into its main directory
# 3. Run ./run there

set -e
#set -x

ZIP=$(which zip)
OVERVIEW_DIR="$(cd "$(dirname "$0")"; pwd)" # absolute-ish path

fail() {
  echo "$@" >&2
  echo >&2
  echo "Usage: ./build overview-server.zip" >&2
  exit 1
}

if [ -z "$ZIP" ]; then
  fail "You must install the 'zip' command-line tool"
fi

OUTPUT_ZIP="$1"

if [ -z "$OUTPUT_ZIP" ]; then
  fail "You did not specify a zipfile to write to"
fi

OUTPUT_DIRECTORY=${OUTPUT_ZIP%.zip}

if [ "$OUTPUT_ZIP" = "$OUTPUT_DIRECTORY" ]; then
  fail "The zipfile you specify must end with '.zip'"
fi

# Remove the "dist" folder before building: otherwise sbt will find the jars
# inside from a previous build and complain about "Duplicate mappings"
rm -rf "$OVERVIEW_DIR"/dist

./sbt $SBT_OPTIONS -Dsbt.log.noformat=true '; db-evolution-applier/stage; worker/stage; web/stage'

BASE="$OUTPUT_DIRECTORY"
STAGE="target/universal/stage"

mkdir -p "$OVERVIEW_DIR"/dist
pushd "$OVERVIEW_DIR"/dist

# Copy over all jars
#
# We put these in a "lib" directory because the runner scripts that sbt
# generates expect to be in a "bin" directory -- they look for "../lib" and
# it's really easy if we just go with that.

mkdir lib

mkdir worker
ls ../worker/$STAGE/lib > worker/classpath.txt
ln -f ../worker/$STAGE/lib/* lib/
[[ -d ../worker/$STAGE/bin ]] && cp -f ../worker/$STAGE/bin/* worker/

mkdir web
ln -f ../web/$STAGE/lib/* lib/
ls ../web/$STAGE/lib > web/classpath.txt
cp -f ../web/$STAGE/bin/* web/

mkdir db-evolution-applier
ln -f ../db-evolution-applier/target/db-evolution-applier/universal/stage/lib/* lib/
ls ../db-evolution-applier/target/db-evolution-applier/universal/stage/lib > db-evolution-applier/classpath.txt
cp -f ../db-evolution-applier/target/db-evolution-applier/universal/stage/bin/* db-evolution-applier/

# Add the other files
for file in README.md LICENSE; do
  cp ../$file .
done

TEMP_DIR=$(mktemp -d --suffix=overview-server-build)
ln -s "$OVERVIEW_DIR"/dist "$TEMP_DIR"/"$OUTPUT_DIRECTORY"

rm -f "$OVERVIEW_DIR"/"$OUTPUT_ZIP"
(cd "$TEMP_DIR" && "$ZIP" --quiet -r "$OVERVIEW_DIR"/"$OUTPUT_ZIP" "$OUTPUT_DIRECTORY")

popd # "$OVERVIEW_DIR"/dist
rm -r "$OVERVIEW_DIR"/dist
rm "$TEMP_DIR"/"$OUTPUT_DIRECTORY"
rmdir "$TEMP_DIR"
