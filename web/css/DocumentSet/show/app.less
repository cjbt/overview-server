#tree-app-left {
  position: relative;
  z-index: 2; // hover descriptions go above everything
  .display-flex();
  .flex-direction-column();

  &>* {
    .flex(0 0 auto);
  }

  #tree-app-view {
    .flex(1 1 auto);
    position: relative;

    &>.view {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;

      .display-flex();
      .flex-direction-column();
    }
  }
}

#tree-app-right {
  overflow: hidden;

  // Nudge ever so slightly to the right. Otherwise Chrome rounds down and a
  // scrollbar on the right only works if you move your mouse a pixel to the
  // left of the edge of the screen. It's no big deal if a pixel of the
  // scrollbar gets cut off, but it *is* a big deal if we violate Fitts' law.
  position: relative;
  right: -.5px;
}

#transaction-queue-error-monitor {
  position: absolute;
  top: 0;
  left: 0;
}

#document-list-container {
  position: absolute;
  height: 100%;
  width: 100%;

  .display-flex();
  .flex-direction-column();

  &>.header {
    .flex(0 0 auto);
    .display-flex();

    margin-top: 1em;
  }

  &>#document-list {
    .flex(1 1 auto);
  }

  #tree-app-tag-this {
    margin-top: -.5em;
    margin-right: .5px; // so we're sure to see the border -- poor Fitts

    // CRAZY hack: the tag-this button is tied to the keyboard, so we only
    // want one. We'll leave it on the screen even when the user is viewing
    // a single document.
    //
    // This breaks a bunch of things: for one thing, the user sees it float
    // when switching to single-doc mode; for another, it harms layout at low
    // resolutions. There are several alternatives; they all force us to
    // modularize our HTML, JavaScript and CSS, which takes time.
    //
    // TODO modularize our code and nix this floating button.
    position: absolute;
    right: 0;
    z-index: 1;
  }
}
